(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{267:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#面向对象"}},[t._v("面向对象")]),a("ul",[a("li",[a("a",{attrs:{href:"#三大特性"}},[t._v("三大特性")])]),a("li",[a("a",{attrs:{href:"#重载、覆盖（重写）、隐藏（重定义）"}},[t._v("重载、覆盖（重写）、隐藏（重定义）")])])])]),a("li",[a("a",{attrs:{href:"#类"}},[t._v("类")]),a("ul",[a("li",[a("a",{attrs:{href:"#定义"}},[t._v("定义")])]),a("li",[a("a",{attrs:{href:"#访问权限"}},[t._v("访问权限")])]),a("li",[a("a",{attrs:{href:"#一个空类编译器会自动生成哪些函数？-哪些需要禁止？"}},[t._v("一个空类编译器会自动生成哪些函数？ 哪些需要禁止？")])]),a("li",[a("a",{attrs:{href:"#类静态成员函数的特点、静态成员函数可以是虚函数吗、静态成员函数可以是const函数吗？"}},[t._v("类静态成员函数的特点、静态成员函数可以是虚函数吗、静态成员函数可以是const函数吗？")])]),a("li",[a("a",{attrs:{href:"#this指针"}},[t._v("this指针")])]),a("li",[a("a",{attrs:{href:"#成员函数可以调用delete-this吗？"}},[t._v("成员函数可以调用delete this吗？")])]),a("li",[a("a",{attrs:{href:"#构造函数"}},[t._v("构造函数")])]),a("li",[a("a",{attrs:{href:"#深拷贝和浅拷贝"}},[t._v("深拷贝和浅拷贝")])]),a("li",[a("a",{attrs:{href:"#析构函数"}},[t._v("析构函数")])]),a("li",[a("a",{attrs:{href:"#友元函数"}},[t._v("友元函数")])]),a("li",[a("a",{attrs:{href:"#模板"}},[t._v("模板")])]),a("li",[a("a",{attrs:{href:"#模板的编译过程，模板是什么时候实例化的？模板特化"}},[t._v("模板的编译过程，模板是什么时候实例化的？模板特化")])])])]),a("li",[a("a",{attrs:{href:"#继承"}},[t._v("继承")]),a("ul",[a("li",[a("a",{attrs:{href:"#公有继承（public）"}},[t._v("公有继承（public）")])]),a("li",[a("a",{attrs:{href:"#私有继承（private）"}},[t._v("私有继承（private）")])]),a("li",[a("a",{attrs:{href:"#保护继承（protected）"}},[t._v("保护继承（protected）")])]),a("li",[a("a",{attrs:{href:"#虚继承"}},[t._v("虚继承")])]),a("li",[a("a",{attrs:{href:"#继承时的名字遮蔽问题"}},[t._v("继承时的名字遮蔽问题")])]),a("li",[a("a",{attrs:{href:"#c-中如何防止类被继承"}},[t._v("C++中如何防止类被继承")])])])]),a("li",[a("a",{attrs:{href:"#多态和虚函数"}},[t._v("多态和虚函数")]),a("ul",[a("li",[a("a",{attrs:{href:"#虚函数"}},[t._v("虚函数")])]),a("li",[a("a",{attrs:{href:"#纯虚函数"}},[t._v("纯虚函数")])]),a("li",[a("a",{attrs:{href:"#虚函数表"}},[t._v("虚函数表")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),a("h3",{attrs:{id:"三大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大特性","aria-hidden":"true"}},[t._v("#")]),t._v(" 三大特性")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("封装")]),t._v(" "),a("p",[t._v("封装是实现面向对象程序设计的第一步，封装就是将数据或函数等集合在一个个的单元中 （我们称之为类）。封装的意义在于保护或者防止代码（数据）被我们无意中破坏，把它的一部分属性 和功能对外界屏蔽。")])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("继承")]),t._v(" "),a("p",[t._v("继承主要实现重用代码，节省开发时间。子类可以继承父类的一些东西。")])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("多态")]),t._v(" "),a("p",[t._v("同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。分为编译时多态和 运行时多态。")])]),t._v(" "),a("h3",{attrs:{id:"重载、覆盖（重写）、隐藏（重定义）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载、覆盖（重写）、隐藏（重定义）","aria-hidden":"true"}},[t._v("#")]),t._v(" 重载、覆盖（重写）、隐藏（重定义）")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("重载")]),t._v(" "),a("ol",[a("li",[t._v("在同一个作用域下，函数名相同，函数的参数不同（参数不同指参数的类型或参数的个数不相同）")]),t._v(" "),a("li",[t._v("不能根据返回值判断两个函数是否构成重载。")]),t._v(" "),a("li",[t._v("当函数构成重载后，调用该函数时，编译器会根据函数的参数选择合适的函数进行调用。")])])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("重写（覆盖）")]),t._v(" "),a("ol",[a("li",[t._v("在不同的作用域下（一个在父类，一个在子类），函数的函数名、参数、返回值完全相同，父类必须含有"),a("code",[t._v("virtual")]),t._v("关键字（协变除外）。")]),t._v(" "),a("li",[t._v("子类重新定义父类中有相同名称和参数的虚函数。")]),t._v(" "),a("li",[t._v("重写需要注意：\n"),a("ul",[a("li",[t._v("被重写的函数不能是"),a("code",[t._v("static")]),t._v("的。必须是"),a("code",[t._v("virtual")]),t._v("的")]),t._v(" "),a("li",[t._v("重写函数必须有相同的类型，名称和参数列表")]),t._v(" "),a("li",[t._v("重写函数的访问修饰符可以不同。尽管"),a("code",[t._v("virtual")]),t._v("是"),a("code",[t._v("private")]),t._v("的，派生类中重写改写为"),a("code",[t._v("public")]),t._v(","),a("code",[t._v("protected")]),t._v("也是可以的")])])])])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("重定义（隐藏）")]),t._v(" "),a("ol",[a("li",[t._v("在不同的作用域下（这里不同的作用域指一个在子类，一个在父类 ），函数名相同的两个函数构成重定义。（不是虚函数）")]),t._v(" "),a("li",[t._v("当两个函数构成重定义时，父类的同名函数会被隐藏，当用子类的对象调用同名的函数时，如果不指 定类作用符，就只会调用子类的同名函数。")]),t._v(" "),a("li",[t._v("如果想要调用父类的同名函数，就必须指定父类的域作用符。 注意：当父类和子类的成员变量名相同时，也会构成隐藏。")])])]),t._v(" "),a("h2",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类","aria-hidden":"true"}},[t._v("#")]),t._v(" 类")]),t._v(" "),a("h3",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("     \n    数据成员或成员函数 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("    \n    数据成员或成员函数 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("     \n    数据成员或成员函数 \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"访问权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问权限","aria-hidden":"true"}},[t._v("#")]),t._v(" 访问权限")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("public（公有类型）")]),t._v("：表示这个成员可以被该类对象处在同一作用域内的任何函数使用。一般将成员 函数声明为公有的访问控制。")]),t._v(" "),a("li",[a("strong",[t._v("private（私有类型）")]),t._v("：表示这个成员能被它所在的类中的成员函数&该类的友元函数使用。")]),t._v(" "),a("li",[a("strong",[t._v("protected（保护类型）")]),t._v("：表示这个成员只能被它所在类&从该类派生的子类的成员函数&友元函数使用。")])]),t._v(" "),a("h3",{attrs:{id:"一个空类编译器会自动生成哪些函数？-哪些需要禁止？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个空类编译器会自动生成哪些函数？-哪些需要禁止？","aria-hidden":"true"}},[t._v("#")]),t._v(" 一个空类编译器会自动生成哪些函数？ 哪些需要禁止？")]),t._v(" "),a("p",[t._v("当空类"),a("code",[t._v("Empty_one")]),t._v("定义一个对象时"),a("code",[t._v("Empty_one pt;sizeof(pt)")]),t._v("仍是为"),a("code",[t._v("1")]),t._v("，但编译器会生成"),a("code",[t._v("6")]),t._v("个成员函数：一个缺省的构造函数、一个拷贝构造函数、一个析构函数、一个赋值运算符、两个取址运算符。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Empty")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//缺省构造函数  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拷贝构造函数  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//析构函数   ")]),t._v("\n    Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//赋值运算符  ")]),t._v("\n    Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取址运算符  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取址运算符(const版本)  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),a("p",[t._v("对于某些类而言，对象的拷贝或赋值时不合法的，例如定义了一个学生类，但对于学生对象而言，只能有一个，世界上不存在两个一样的学生对象，我们应该明确阻止学生对象之间的拷贝或赋值，也就是说学生类是不支持拷贝或赋值的。")]),t._v(" "),a("p",[t._v("阻止拷贝构造函数及拷贝赋值运算符的生成，下面主要介绍三种：")]),t._v(" "),a("ol",[a("li",[t._v("在"),a("code",[t._v("C++11")]),t._v("标准下，将这些函数声明为删除的函数，在函数参数的后面加上"),a("code",[t._v("=delete")]),t._v("来指示出我们定义的删除的函数")]),t._v(" "),a("li",[t._v("将这些函数声明为"),a("code",[t._v("private")]),t._v(",并且不提供函数定义")]),t._v(" "),a("li",[t._v("将待定义的类成为一个不支持"),a("code",[t._v("copy")]),t._v("的类的子类")])]),t._v(" "),a("h3",{attrs:{id:"类静态成员函数的特点、静态成员函数可以是虚函数吗、静态成员函数可以是const函数吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类静态成员函数的特点、静态成员函数可以是虚函数吗、静态成员函数可以是const函数吗？","aria-hidden":"true"}},[t._v("#")]),t._v(" 类静态成员函数的特点、静态成员函数可以是虚函数吗、静态成员函数可以是const函数吗？")]),t._v(" "),a("p",[t._v("它为类的全部服务，而不是为某一个类的具体对象服务。静态成员函数与静态数据成员一样，都是在类的内部实现，属于类定义的一部分。普通的成员函数一般都隐藏了一个"),a("code",[t._v("this")]),t._v("指针，"),a("code",[t._v("this")]),t._v("指针指向类的对象本身，因为普通成员函数总是具体的属于某个类的具体对象的。通常情况下，"),a("code",[t._v("this")]),t._v("指针是缺省的、但是与普通函数相比，静态成员函数由于不是与任何的对象相联系，因此它不具有"),a("code",[t._v("this")]),t._v("指针，从这个意义上讲，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，它只能调用其余的静态成员函数。")]),t._v(" "),a("p",[a("strong",[t._v("特点：")])]),t._v(" "),a("ol",[a("li",[t._v("出现在类体外的函数不能指定关键字"),a("code",[t._v("static")]),t._v("；")]),t._v(" "),a("li",[t._v("静态成员之间可以互相访问，包括静态成员函数访问静态数据成员和访问静态成员函数；")]),t._v(" "),a("li",[t._v("非静态成员函数可以任意地访问静态成员函数和静态数据成员；")]),t._v(" "),a("li",[t._v("静态成员函数不能访问非静态成员函数和非静态数据成员")]),t._v(" "),a("li",[t._v("由于没有"),a("code",[t._v("this")]),t._v("指针的额外开销，因此静态成员函数与类的全局函数相比，速度上会有少许的增长")]),t._v(" "),a("li",[t._v("用静态成员函数，可以用成员访问操作符(.)和(->)为一个类的对象或指向类对象的指调用静态成员函数。")])]),t._v(" "),a("p",[a("strong",[t._v("不能为虚函数。")])]),t._v(" "),a("ol",[a("li",[a("code",[t._v("static")]),t._v("成员不属于任何类对象或类实例，所以即使给此函数加上"),a("code",[t._v("virutal")]),t._v("也是没有任何意义的。")]),t._v(" "),a("li",[t._v("静态与非静态成员函数之间有一个主要的区别。那就是静态成员函数没有"),a("code",[t._v("this")]),t._v("指针。")])]),t._v(" "),a("p",[t._v("虚函数依靠"),a("code",[t._v("vptr")]),t._v("和"),a("code",[t._v("vtable")]),t._v("来处理。"),a("code",[t._v("vptr")]),t._v("是一个指针，在类的构造函数中创建生成，并且只能用"),a("code",[t._v("this")]),t._v("指针来访问它，因为它是类的一个成员，并且"),a("code",[t._v("vptr")]),t._v("指向保存虚函数地址的"),a("code",[t._v("vtable")]),t._v(".")]),t._v(" "),a("p",[t._v("对于静态成员函数，它没有"),a("code",[t._v("this")]),t._v("指针，所以无法访问"),a("code",[t._v("vptr")]),t._v(". 这就是为何"),a("code",[t._v("static")]),t._v("函数不能为"),a("code",[t._v("virtual")]),t._v(".")]),t._v(" "),a("p",[t._v("虚函数的调用关系："),a("code",[t._v("this -> vptr -> vtable ->virtual function")])]),t._v(" "),a("p",[a("strong",[t._v("不能为const。")])]),t._v(" "),a("p",[t._v("静态成员函数是属于类的，而不是某个具体对象，在没有具体对象的时候静态成员就已经存在，静态成员函数不会访问到非静态成员，也不存在"),a("code",[t._v("this")]),t._v("指针。而成员函数的"),a("code",[t._v("const")]),t._v("就是修饰"),a("code",[t._v("this")]),t._v("指针的，既然静态成员函数不会被传递"),a("code",[t._v("this")]),t._v("指针，那"),a("code",[t._v("const")]),t._v("自然就没有必要了")]),t._v(" "),a("p",[a("strong",[t._v("不能为volatile")])]),t._v(" "),a("p",[t._v("与"),a("code",[t._v("const")]),t._v("同理")]),t._v(" "),a("p",[a("code",[t._v("volatile")]),t._v("关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法："),a("code",[t._v("int volatile vInt")]),t._v("; 当要求使用 "),a("code",[t._v("volatile")]),t._v(" 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。")]),t._v(" "),a("h3",{attrs:{id:"this指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指针","aria-hidden":"true"}},[t._v("#")]),t._v(" this指针")]),t._v(" "),a("p",[a("code",[t._v("this")]),t._v("指针指向类的某个实例（对象），叫它当前对象。在成员函数执行的过程中，正是通过"),a("code",[t._v("this")]),t._v("指针才能找到对象所在的地址，因而也就能找到对象的所有非静态成员变量的地址。")]),t._v(" "),a("h3",{attrs:{id:"成员函数可以调用delete-this吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成员函数可以调用delete-this吗？","aria-hidden":"true"}},[t._v("#")]),t._v(" 成员函数可以调用delete this吗？")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("delete this")]),t._v("之后，会释放掉类的对象的内存空间，因此如果在"),a("code",[t._v("delete this")]),t._v("之后进行的其他任何函数调用，只要不涉及到"),a("code",[t._v("this")]),t._v("指针的内容，都能够正常运行。一旦涉及到"),a("code",[t._v("this")]),t._v("指针，如操作数据成员，调用虚函数等，就会出现不可预期的问题。")]),t._v(" "),a("p",[a("code",[t._v("delete this")]),t._v("之后不是释放了类对象的内存空间了么，那么这段内存应该已经还给系统，不再属于这个进程。照这个逻辑来看，应该发生指针错误，无访问权限之类的令系统崩溃的问题才对啊？这个问题牵涉到操作系统的内存管理策略。"),a("code",[t._v("delete this")]),t._v("释放了类对象的内存空间，但是内存空间却并不是马上被回收到系统中，可能是缓冲或者其他什么原因，导致这段内存空间暂时并没有被系统收回。此时这段内存是可以访问的，你可以加上100，加上200，但是其中的值却是不确定的。当你获取数据成员，可能得到的是一串很长的未初始化的随机数；访问虚函数表，指针无效的可能性非常高，造成系统崩溃。")]),t._v(" "),a("p",[t._v("如果在类的析构函数中调用"),a("code",[t._v("delete this")]),t._v("，会发生什么？实验告诉我们，会导致堆栈溢出。原因很简单，"),a("code",[t._v("delete")]),t._v("的本质是“为将被释放的内存调用一个或多个析构函数，然后，释放内存” (来自"),a("code",[t._v("effective c++")]),t._v(")。显然，"),a("code",[t._v("delete this")]),t._v("会去调用本对象的析构函数，而析构函数中又调用"),a("code",[t._v("delete this")]),t._v("，形成无限递归，造成堆栈溢出，系统崩溃。")]),t._v(" "),a("h3",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("p",[t._v("每个类都分别定义了它的对象被初始化的方式，类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数叫构造函数。构造函数的任务是初始化类对象的数据成员，无论何时只要类的对象被创建，就会执行构造函数。")]),t._v(" "),a("ul",[a("li",[t._v("构造函数的名字和类名相同、无返回类型、有一个（可能为空的）参数列表和一个（可能为空的）函数体。")]),t._v(" "),a("li",[t._v("类可以包含多个构造函数，和其他重载函数差不多，不同的构造函数之间必须在参数数量或参数类型上有所区别。")]),t._v(" "),a("li",[t._v("不同于其他成员函数，构造函数不能被声明成"),a("code",[t._v("const")]),t._v("的。当我们创建类的一个"),a("code",[t._v("const")]),t._v("对象时，直到构造函数完成初始化过程，对象才能真正取得其“常亮”属性。因此，构造函数在"),a("code",[t._v("const")]),t._v("对象的构造过程中可以向其写值。")]),t._v(" "),a("li",[t._v("与其他成员函数相同的是，构造函数在类外定义时也需要明确指出是哪个类。")]),t._v(" "),a("li",[t._v("通常情况下，我们将构造函数声明为"),a("code",[t._v("public")]),t._v("的，可以供外部调用。然而有时候我们会将构造函数声明为"),a("code",[t._v("private")]),t._v("或"),a("code",[t._v("protected")]),t._v("的：\n"),a("ul",[a("li",[t._v("如果类的作者不希望用户直接构造一个类对象，着只是希望用户构造这个类的子类，那么就可以将构造函数声明为"),a("code",[t._v("protected")]),t._v("，而将该类的子类声明为"),a("code",[t._v("public")]),t._v("。")]),t._v(" "),a("li",[t._v("如果将构造函数声明为"),a("code",[t._v("private")]),t._v("，那只有这个类的成员函数才能构造这个类的对象。")])])])]),t._v(" "),a("h4",{attrs:{id:"委托构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#委托构造函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 委托构造函数")]),t._v(" "),a("p",[t._v("在一个类中重载多个构造函数时，这些函数只是形参不同，初始化列表不同，而初始化算法和函数体都是相同的。这个时候，为了避免重复，"),a("code",[t._v("C++11")]),t._v("新标准提供了委托构造函数。更重要的是，可以保持代码的一致性，如果以后要修改构造函数的代码，只需要在一处修改即可。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实现一个初始化函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("validate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bad_X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 三个构造函数都调用validate()，完成初始化工作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("validate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("validate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lexical_cast"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("validate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// …")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这样的实现方式重复罗嗦，并且容易出错。并且，这两种方式的可维护性都很差。所以，在"),a("code",[t._v("C++0x")]),t._v("中，我们可以在定义一个构造函数时调用另外一个构造函数：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bad_X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数X()调用构造函数X(int x)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数X(string s)调用构造函数X(int x)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("lexical_cast"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// …")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"拷贝构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 拷贝构造函数")]),t._v(" "),a("p",[t._v("如果一个构造函数的第一个参数是自身类型的引用，且任何额外参数都有默认值，则此构造函数是"),a("strong",[t._v("拷贝构造函数")]),t._v("。")]),t._v(" "),a("p",[t._v("如果类的设计者不写复制构造函数，编译器就会自动生成复制构造函数。大多数情况下，其作用是实现从源对象到目标对象逐个字节的复制，即使得目标对象的每个成员变量都变得和源对象相等。编译器自动生成的复制构造函数称为“默认复制构造函数”。")]),t._v(" "),a("p",[t._v("注意，默认构造函数（即无参构造函数）不一定存在，但是复制构造函数总是会存在。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拷贝构造函数   ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"拷贝构造函数的调用时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数的调用时机","aria-hidden":"true"}},[t._v("#")]),t._v(" 拷贝构造函数的调用时机")]),t._v(" "),a("ol",[a("li",[t._v("当用一个对象去初始化同类的另一个对象时，会引发复制构造函数被调用。例如，下面的两条语句都会引发复制构造函数的调用，用以初始化 "),a("code",[t._v("c2")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Complex "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("c2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nComplex c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果函数 "),a("code",[t._v("F")]),t._v(" 的参数是类 "),a("code",[t._v("A")]),t._v(" 的对象，那么当 "),a("code",[t._v("F")]),t._v(" 被调用时，类 "),a("code",[t._v("A")]),t._v(" 的复制构造函数将被调用。换句话说，作为形参的对象，是用复制构造函数初始化的，而且调用复制构造函数时的参数，就是调用函数时所给的实参。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Copy constructor called"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    A a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("程序的输出结果为：\n"),a("code",[t._v("Copy constructor called")])]),t._v(" "),a("p",[t._v("这是因为 "),a("code",[t._v("Func")]),t._v(" 函数的形参 "),a("code",[t._v("a")]),t._v(" 在初始化时调用了复制构造函数。")]),t._v(" "),a("p",[t._v("函数的形参的值等于函数调用时对应的实参，现在可以知道这不一定是正确的。如果形参是一个对象，那么形参的值是否等于实参，取决于该对象所属的类的复制构造函数是如何实现的。例如上面的例子，"),a("code",[t._v("Func")]),t._v(" 函数的形参 "),a("code",[t._v("a")]),t._v(" 的值在进入函数时是随机的，未必等于实参，因为复制构造函数没有做复制的工作。")]),t._v(" "),a("p",[t._v("以对象作为函数的形参，在函数被调用时，生成的形参要用复制构造函数初始化，这会带来时间上的开销。如果用对象的引用而不是对象作为形参，就没有这个问题了。但是以引用作为形参有一定的风险，因为这种情况下如果形参的值发生改变，实参的值也会跟着改变。")]),t._v(" "),a("p",[t._v("如果要确保实参的值不会改变，又希望避免复制构造函数带来的开销，解决办法就是将形参声明为对象的 "),a("code",[t._v("const")]),t._v(" 引用。例如：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Complex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("如果函数的返冋值是类 "),a("code",[t._v("A")]),t._v(" 的对象，则函数返冋时，类 "),a("code",[t._v("A")]),t._v(" 的复制构造函数被调用。换言之，作为函数返回值的对象是用复制构造函数初始化的，而调用复制构造函数时的实参，就是 "),a("code",[t._v("return")]),t._v(" 语句所返回的对象。例如下面的程序：")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Copy constructor called"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nA "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    A "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("程序的输出结果是：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Copy constructor called\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("h5",{attrs:{id:"拷贝构造函数的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数的作用","aria-hidden":"true"}},[t._v("#")]),t._v(" 拷贝构造函数的作用")]),t._v(" "),a("p",[t._v("用来复制对象的，在使用这个对象的实例来初始化这个对象的一个新的实例。")]),t._v(" "),a("p",[t._v("上面说的三个调用时机，如果后两种不用拷贝构造函数的话，会导致一个指针指向已经删除的内存空间。对于第一种情况，初始化和赋值的不同含义是拷贝构造函数调用的原因。")]),t._v(" "),a("h5",{attrs:{id:"重写拷贝构造函数的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重写拷贝构造函数的意义","aria-hidden":"true"}},[t._v("#")]),t._v(" 重写拷贝构造函数的意义")]),t._v(" "),a("p",[t._v("因为如果不写拷贝构造函数，系统就只会调用默认构造函数，然而默认构造函数是一种"),a("strong",[t._v("浅拷贝")]),t._v("。相当于只对指针进行了拷贝（位拷贝），而有些时候我们却需要拷贝整个构造函数包括指向的内存，这种拷贝被称为"),a("strong",[t._v("深拷贝")]),t._v("（值拷贝）。")]),t._v(" "),a("p",[t._v("所以为了达成深拷贝的目的，自己手写拷贝构造函数是非常必要的。")]),t._v(" "),a("h5",{attrs:{id:"防止默认拷贝发生"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防止默认拷贝发生","aria-hidden":"true"}},[t._v("#")]),t._v(" 防止默认拷贝发生")]),t._v(" "),a("p",[t._v("通过对对象复制的分析，我们发现对象的复制大多在进行“值传递”时发生，这里有一个小技巧可以防止按值传递——声明一个私有拷贝构造函数。甚至不必去定义这个拷贝构造函数，这样因为拷贝构造函数是私有的，如果用户试图按值传递或函数返回该类对象，将得到一个编译错误，从而可以避免按值传递或返回对象。")]),t._v(" "),a("h5",{attrs:{id:"为什么参数为引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么参数为引用类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么参数为引用类型")]),t._v(" "),a("p",[t._v("​简单的回答是为了防止递归引用。​因为，在值传递的方式传递给一个函数的时候，会调用拷贝构造函数生成函数的实参。如果拷贝构造函数的参数仍然是以值的方式，就会无限循环的调用下去，直到函数的栈溢出。")]),t._v(" "),a("h5",{attrs:{id:"为什么参数要加const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么参数要加const","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么参数要加const")]),t._v(" "),a("p",[t._v("如果在函数中不会改变引用类型参数的值，加不加"),a("code",[t._v("const")]),t._v("的效果是一样的。而且不加"),a("code",[t._v("const")]),t._v("，编译器也不会报错。但是为了整个程序的安全，还是加上"),a("code",[t._v("const")]),t._v("，防止对引用类型参数值的意外修改。")]),t._v(" "),a("h5",{attrs:{id:"何时调用拷贝构造函数，何时调用赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何时调用拷贝构造函数，何时调用赋值运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 何时调用拷贝构造函数，何时调用赋值运算符")]),t._v(" "),a("p",[t._v("调用的是拷贝构造函数还是赋值运算符，主要是看是否有新的对象实例产生。如果产生了新的对象实例，那调用的就是拷贝构造函数；如果没有，那就是对已有的对象赋值，调用的是赋值运算符。")]),t._v(" "),a("p",[t._v("调用拷贝构造函数主要有以下场景：")]),t._v(" "),a("ul",[a("li",[t._v("对象作为函数的参数，以值传递的方式传给函数。")]),t._v(" "),a("li",[t._v("对象作为函数的返回值，以值的方式从函数返回")]),t._v(" "),a("li",[t._v("使用一个对象给另一个对象初始化")])]),t._v(" "),a("h3",{attrs:{id:"深拷贝和浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝","aria-hidden":"true"}},[t._v("#")]),t._v(" 深拷贝和浅拷贝")]),t._v(" "),a("h4",{attrs:{id:"浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝","aria-hidden":"true"}},[t._v("#")]),t._v(" 浅拷贝")]),t._v(" "),a("p",[t._v("所谓浅拷贝，指的是在对象复制时，只对对象中的数据成员进行简单的赋值，默认拷贝构造函数执行的也是浅拷贝。大多情况下“浅拷贝”已经能很好地工作了，但是一旦对象存在了动态成员（指针），那么浅拷贝就会出问题了，让我们考虑如下一段代码：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   Rect rect1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   Rect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rect2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rect1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在这段代码运行结束之前，会出现一个运行错误。原因就在于在进行对象复制时，对于动态分配的内容没有进行正确的操作。我们来分析一下：\n在运行定义"),a("code",[t._v("rect1")]),t._v("对象后，由于在构造函数中有一个动态分配的语句，因此执行后的内存情况大致如下：\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E6%B5%85%E6%8B%B7%E8%B4%9D01.jpg",alt:""}})]),t._v(" "),a("p",[t._v("在使用"),a("code",[t._v("rect1")]),t._v("复制"),a("code",[t._v("rect2")]),t._v("时，由于执行的是浅拷贝，只是将成员的值进行赋值，这时 "),a("code",[t._v("rect1.p = rect2.p")]),t._v("，也即这两个指针指向了堆里的同一个空间，如下图所示：\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E6%B5%85%E6%8B%B7%E8%B4%9D02.jpg",alt:""}})]),t._v(" "),a("p",[t._v("当然，这不是我们所期望的结果，在销毁对象时，两个对象的析构函数将对同一个内存空间释放两次，这就是错误出现的原因。我们需要的不是两个"),a("code",[t._v("p")]),t._v("有相同的值，而是两个p指向的空间有相同的值，解决办法就是使用“深拷贝”。")]),t._v(" "),a("h4",{attrs:{id:"深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝","aria-hidden":"true"}},[t._v("#")]),t._v(" 深拷贝")]),t._v(" "),a("p",[t._v("在“深拷贝”的情况下，对于对象中动态成员，就不能仅仅简单地赋值了，而应该重新动态分配空间，如上面的例子就应该按照如下的方式进行处理：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      width"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      height"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   \n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Rect rect1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  Rect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rect2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rect1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("此时，在完成对象的复制后，内存的一个大致情况如下：\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E6%B7%B1%E6%8B%B7%E8%B4%9D.jpg",alt:""}})]),t._v(" "),a("p",[t._v("此时"),a("code",[t._v("rect1")]),t._v("的"),a("code",[t._v("p")]),t._v("和"),a("code",[t._v("rect2")]),t._v("的"),a("code",[t._v("p")]),t._v("各自指向一段内存空间，但它们指向的空间具有相同的内容，这就是所谓的“深拷贝”。")]),t._v(" "),a("p",[t._v("简而言之，当数据成员中有"),a("strong",[t._v("指针")]),t._v("时，必须要用深拷贝。")]),t._v(" "),a("h4",{attrs:{id:"参数传递过程到底发生了什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数传递过程到底发生了什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" 参数传递过程到底发生了什么？")]),t._v(" "),a("p",[t._v('将地址传递和值传递统一起来，归根结底还是传递的是"值"(地址也是值，只不过通过它可以找到另一个值)！')]),t._v(" "),a("ul",[a("li",[t._v("值传递:\n"),a("ul",[a("li",[t._v("对于内置数据类型的传递时，直接赋值拷贝给形参(注意形参是函数内局部变量)；")]),t._v(" "),a("li",[t._v("对于类类型的传递时，需要首先调用该类的拷贝构造函数来初始化形参(局部对象)；如"),a("code",[t._v("void foo(class_type obj_local){}")]),t._v(", 如果调用"),a("code",[t._v("foo(obj)")]),t._v("; 首先"),a("code",[t._v("class_type obj_local(obj)")]),t._v(",这样就定义了局部变量"),a("code",[t._v("obj_local")]),t._v("供函数内部使用")])])]),t._v(" "),a("li",[t._v("引用传递:\n"),a("ul",[a("li",[t._v("无论对内置类型还是类类型，传递引用或指针最终都是传递的地址值！而地址总是指针类型(属于简单类型), 显然参数传递时，按简单类型的赋值拷贝，而不会有拷贝构造函数的调用(对于类类型).")])])])]),t._v(" "),a("h3",{attrs:{id:"析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#析构函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 析构函数")]),t._v(" "),a("p",[t._v("构造函数用于创建对象，而析构函数是用来撤销对象。\n析构函数往往用来做“清理善后” 的工作（例如在建立对象时用"),a("code",[t._v("new")]),t._v("开辟了一片内存空间，应在退出前在析构函数中用"),a("code",[t._v("delete")]),t._v("释放）。")]),t._v(" "),a("h4",{attrs:{id:"虚析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚析构函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚析构函数")]),t._v(" "),a("p",[t._v("虚析构函数可以认为是特殊的析构函数，主要作用在继承关系中。")]),t._v(" "),a("p",[t._v("若"),a("code",[t._v("B")]),t._v("是"),a("code",[t._v("A")]),t._v("的子类：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果"),a("code",[t._v("A")]),t._v("的析构函数是"),a("code",[t._v("non-vartual")]),t._v("，则只会调用"),a("code",[t._v("A")]),t._v("的析构函数，这样"),a("code",[t._v("B")]),t._v("的资源没有释放，就会有内存泄露；")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("A")]),t._v("的析构函数是"),a("code",[t._v("vartual")]),t._v("，则只会先调用"),a("code",[t._v("A")]),t._v("的析构函数，再调用"),a("code",[t._v("B")]),t._v("的析构函数。")])]),t._v(" "),a("h3",{attrs:{id:"友元函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#友元函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 友元函数")]),t._v(" "),a("h4",{attrs:{id:"为什么要有？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有？","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么要有？")]),t._v(" "),a("p",[t._v("友元函数是一个不属于类成员的函数，但它可以访问该类的私有成员。换句话说，友元函数被视为好像是该类的一个成员。友元函数可以是常规的独立函数，也可以是其他类的成员。实际上，整个类都可以声明为另一个类的友元。")]),t._v(" "),a("p",[t._v('为了使一个函数或类成为另一个类的友元，必须由授予它访问权限的类来声明。类保留了它们的朋友的 "名单"，只有名字出现在列表中的外部函数或类才被授予访问权限。通过将关键字 '),a("code",[t._v("friend")]),t._v(" 放置在函数的原型之前，即可将函数声明为友元。")]),t._v(" "),a("h4",{attrs:{id:"使用友元函数的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用友元函数的优缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用友元函数的优缺点")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("优点")]),t._v(" "),a("p",[t._v("能够提高效率，表达简单、清晰。")])]),t._v(" "),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("缺点")]),t._v(" "),a("p",[t._v("友元函数破环了封装机制，尽量不使用成员函数，除非不得已的情况下才使用友元函数。")])]),t._v(" "),a("h4",{attrs:{id:"友元函数的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#友元函数的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" 友元函数的使用")]),t._v(" "),a("p",[t._v("可以直接调用友元函数，不需要通过对象或指针;此外，友元函数没有"),a("code",[t._v("this")]),t._v("指针，则参数要有三种情况：")]),t._v(" "),a("ol",[a("li",[t._v("要访问非"),a("code",[t._v("static")]),t._v("成员时，需要对象做参数；")]),t._v(" "),a("li",[t._v("要访问"),a("code",[t._v("static")]),t._v("成员或全局变量时，则不需要对象做参数；")]),t._v(" "),a("li",[t._v("如果做参数的对象是全局对象，则不需要对象做参数.")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认是private")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printWidth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Box box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 友元函数声明")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 友元类的声明")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setWidth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" wid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成员函数的定义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" Box"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setWidth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" wid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 友元函数的定义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请注意：printWidth() 不是任何类的成员函数!!!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printWidth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Box box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 因为printWidth()是Box的友元函数，它可以直接访问该类的任何成员 */")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Width of Box: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 友元类的使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Box "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BigBox是Box类的友元类，它可以直接访问Box类的任何成员")]),t._v("\n            box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setWidth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Width of Box: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Box box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    BigBox big"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用成员函数设置宽度")]),t._v("\n    box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setWidth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用友元函数输出宽度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printWidth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用友元函数！")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-------------------------------------\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用友元类中的方法设置宽度")]),t._v("\n    big"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板","aria-hidden":"true"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),a("h4",{attrs:{id:"模板类了解吗（类模板）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板类了解吗（类模板）","aria-hidden":"true"}},[t._v("#")]),t._v(" 模板类了解吗（类模板）")]),t._v(" "),a("p",[t._v("由类模板实例化得到的类叫模板类。")]),t._v(" "),a("p",[t._v("类模板使用"),a("code",[t._v("template")]),t._v("来声明。可以定义相同的操作，拥有不同数据类型的成员属性。")]),t._v(" "),a("h3",{attrs:{id:"模板的编译过程，模板是什么时候实例化的？模板特化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板的编译过程，模板是什么时候实例化的？模板特化","aria-hidden":"true"}},[t._v("#")]),t._v(" 模板的编译过程，模板是什么时候实例化的？模板特化")]),t._v(" "),a("h4",{attrs:{id:"编译过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译过程","aria-hidden":"true"}},[t._v("#")]),t._v(" 编译过程")]),t._v(" "),a("p",[t._v("通常我们将函数或类的声明放在头("),a("code",[t._v(".h")]),t._v(")文件中，定义放在("),a("code",[t._v(".cpp")]),t._v(")文件中，在其他文件中使用该函数或类时引用头文件即可，编译器是怎么工作的呢？编译器首先编译所有"),a("code",[t._v("cpp")]),t._v("文件，如果在程序中用到某个函数或类，只是判断这个函数或类是否已经声明，并不会立即找到这个函数或类定义的地址，只有在链接的过程中才会去寻找具体的地址，所以我们如果只是对某个函数或类声明了，而不定义它的具体内容，如果我不再其他地方使用它，这是没有任何问题的。")]),t._v(" "),a("p",[t._v("而编译器在编译模板所在的文件时，模板的内容是不会立即生成二进制代码的，直到有地方使用到该模板时，才会对该模板生成二进制代码（即"),a("strong",[t._v("模板实例化")]),t._v("）。但是，如果我们将模板的声明部分和实现部分分别放在"),a("code",[t._v(".h")]),t._v("和"),a("code",[t._v(".cpp")]),t._v("两个文件中时，问题就出现了：由于模板的"),a("code",[t._v("cpp")]),t._v("文件中使用的不是具体类型，所以编译器不能为其生成二进制代码，在其他文件使用模板时只是引用了头文件，编译器在编译时可以识别该模板，编译可以通过；但是在链接时就不行了，二进制代码根本就没有生成，链接器当然找不到模板的二进制代码的地址了，就会出现找不到函数地址类似的错误信息了。")]),t._v(" "),a("p",[t._v("所以，在通常情况下，我们在定义模板时将声明和定义都放在了头文件中，"),a("code",[t._v("STL")]),t._v("就是这样。当然了，也可以像"),a("code",[t._v("C++ Primer")]),t._v("中所述的，使用"),a("code",[t._v("export")]),t._v("关键字。（你可以在"),a("code",[t._v(".h")]),t._v("文件中，声明模板类和模板函数；在"),a("code",[t._v(".cpp")]),t._v("文件中，使用关键字"),a("code",[t._v("export")]),t._v("来定义具体的模板类对象和模板函数；然后在其他用户代码文件中，包含声明头文件后，就可以使用该这些对象和函数了）")]),t._v(" "),a("p",[a("strong",[t._v("编译和链接：")])]),t._v(" "),a("p",[t._v("当编译器遇到一个"),a("code",[t._v("template")]),t._v("时，不能够立马为他产生机器代码，它必须等到"),a("code",[t._v("template")]),t._v("被指定某种类型。也就是说，函数模板和类模板的完整定义将出现在"),a("code",[t._v("template")]),t._v("被使用的每一个角落。\n对于不同的编译器，其对模板的编译和链接技术也会有所不同，其中一个常用的技术称之为"),a("code",[t._v("Smart")]),t._v("，其基本原理如下：")]),t._v(" "),a("ol",[a("li",[t._v("模板编译时，以每个"),a("code",[t._v("cpp")]),t._v("文件为编译单位，实例化该文件中的函数模板和类模板")]),t._v(" "),a("li",[t._v("链接器在链接每个目标文件时，会检测是否存在相同的实例；有存在相同的实例版本，则删除一个重复的实例，保证模板实例化没有重复存在。")])]),t._v(" "),a("p",[t._v("比如我们有一个程序，包含"),a("code",[t._v("A.cpp")]),t._v("和"),a("code",[t._v("B.cpp")]),t._v("，它们都调用了"),a("code",[t._v("CThree")]),t._v("模板类，在"),a("code",[t._v("A")]),t._v("文件中定义了"),a("code",[t._v("int")]),t._v("和"),a("code",[t._v("double")]),t._v("型的模板类，在B文件中定义了"),a("code",[t._v("int")]),t._v("和"),a("code",[t._v("float")]),t._v("型的模板类；在编译器编译时"),a("code",[t._v(".cpp")]),t._v("文件为编译基础，生成"),a("code",[t._v("A.obj")]),t._v("和"),a("code",[t._v("B.obj")]),t._v("目标文件，即使"),a("code",[t._v("A.obj")]),t._v("和"),a("code",[t._v("B.obj")]),t._v("存在重复的实例版本，但是在链接时，链接器会把所有冗余的模板实例代码删除，保证"),a("code",[t._v("exe")]),t._v("中的实例都是唯一的。编译原理和链接原理，如下所示：\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91.jpg",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例化","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例化")]),t._v(" "),a("p",[t._v("在我们使用类模板时，只有当代码中使用了类模板的一个实例的名字，而且上下文环境要求必须存在类的定义时，这个类模板才被实例化。")]),t._v(" "),a("ol",[a("li",[t._v("声明一个类模板的指针和引用，不会引起类模板的实例化，因为没有必要知道该类的定义。")]),t._v(" "),a("li",[t._v("定义一个类类型的对象时需要该类的定义，因此类模板会被实例化。")]),t._v(" "),a("li",[t._v("在使用"),a("code",[t._v("sizeof()")]),t._v("时，它是计算对象的大小，编译器必须根据类型将其实例化出来，所以类模板被实例化.")]),t._v(" "),a("li",[t._v("new表达式要求类模板被实例化。")]),t._v(" "),a("li",[t._v("引用类模板的成员会导致类模板被编译器实例化。")]),t._v(" "),a("li",[t._v("需要注意的是，类模板的成员函数本身也是一个模板。标准C++要求这样的成员函数只有在被调用或者取地址的时候，才被实例化。用来实例化成员函数的类型，就是其成员函数要调用的那个类对象的类型")])]),t._v(" "),a("h4",{attrs:{id:"模板的特化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板的特化","aria-hidden":"true"}},[t._v("#")]),t._v(" 模板的特化")]),t._v(" "),a("ul",[a("li",[t._v("特化为绝对类型（全特化）")]),t._v(" "),a("li",[t._v("特化为引用，指针类型(半特化、偏特化)")])]),t._v(" "),a("p",[t._v("模板函数只能全特化，\n模板类都可以。")]),t._v(" "),a("p",[a("strong",[t._v("全特化")]),t._v("：就是模板中参数全被指定为确定的类型。")]),t._v(" "),a("p",[t._v("全特化就是定义了一个全新的类型，全特化的类中的函数可以与模板类不一样。")]),t._v(" "),a("p",[a("strong",[t._v("偏特化")]),t._v("：就是模板中的模板参数没有被全部确定，需要编译器在编译时进行确定。")]),t._v(" "),a("p",[t._v("在类型中加上"),a("code",[t._v("const，&，*")]),t._v("（"),a("code",[t._v("const int int& int*")]),t._v(" 等等），并没有产生新的类型，只是类型被修饰了。模板在编译时，可以得到这些修饰信息。")]),t._v(" "),a("p",[t._v("全特化的标志就是产生出完全确定的东西，而不是还需要在编译期间去搜寻合适的特化实现，全特化的东西无论是类还是函数都有该特点。")]),t._v(" "),a("p",[t._v("一个特化的模板类的标志：在定义类实现时，加上了"),a("code",[t._v("<>")])]),t._v(" "),a("p",[t._v("比如 "),a("code",[t._v("class A <int T>")]),t._v("; 但是在定义一个模板类的时候，"),a("code",[t._v("class A")]),t._v("后面是没有"),a("code",[t._v("<>")]),t._v("的。")]),t._v(" "),a("p",[t._v("全特化的标志："),a("code",[t._v("template<>")]),t._v(" 然后是完全和模板类型没有一点关系的类实现或者函数定义。")]),t._v(" "),a("p",[t._v("偏特化的标志："),a("code",[t._v("template<typename T,...>")]),t._v("还剩点东西，不像全特化那么彻底。")]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("p",[t._v("继承方式包括 "),a("code",[t._v("public")]),t._v("（公有的）、"),a("code",[t._v("private")]),t._v("（私有的）和 "),a("code",[t._v("protected")]),t._v("（受保护的），此项是可选的，如果不写，那么"),a("strong",[t._v("默认")]),t._v("为 "),a("code",[t._v("private")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 派生类名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("［继承方式］ 基类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    派生类新增加的成员\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("派生的目的")])]),t._v(" "),a("p",[t._v("当新的问题出现，原有程序无法解决（或不能完全解决）时，需要对原有程序进行改造。")]),t._v(" "),a("p",[a("strong",[t._v("不同继承方式的影响主要体现在")])]),t._v(" "),a("ul",[a("li",[t._v("派生类成员对基类成员的访问权限")]),t._v(" "),a("li",[t._v("通过派生类对象对基类成员的访问权限")])]),t._v(" "),a("h3",{attrs:{id:"公有继承（public）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公有继承（public）","aria-hidden":"true"}},[t._v("#")]),t._v(" 公有继承（public）")]),t._v(" "),a("p",[t._v("它建立一种"),a("code",[t._v("is-a")]),t._v("的关系。 即派生类对象也是一个基类对象，可以对基类对象执行的任何操作，也可以对派生类对象执行。")]),t._v(" "),a("p",[a("strong",[t._v("继承的访问控制")])]),t._v(" "),a("ol",[a("li",[t._v("基类的"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("protected")]),t._v("成员：访问属性在派生类中保持不变；")]),t._v(" "),a("li",[t._v("基类的"),a("code",[t._v("private")]),t._v("成员：不可直接访问。")])]),t._v(" "),a("p",[a("strong",[t._v("访问权限")])]),t._v(" "),a("ol",[a("li",[t._v("派生类中的成员函数：可以直接访问基类中的"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("protected")]),t._v("成员，但不能直接访问基类的"),a("code",[t._v("private")]),t._v("成员；")]),t._v(" "),a("li",[t._v("通过派生类的对象：只能访问"),a("code",[t._v("public")]),t._v("成员。")])]),t._v(" "),a("h3",{attrs:{id:"私有继承（private）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#私有继承（private）","aria-hidden":"true"}},[t._v("#")]),t._v(" 私有继承（private）")]),t._v(" "),a("p",[a("strong",[t._v("继承的访问控制：")])]),t._v(" "),a("ol",[a("li",[t._v("基类的"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("protected")]),t._v("成员：都以"),a("code",[t._v("private")]),t._v("身份出现在派生类中；")]),t._v(" "),a("li",[t._v("基类的"),a("code",[t._v("private")]),t._v("成员：不可直接访问。")])]),t._v(" "),a("p",[a("strong",[t._v("访问权限：")])]),t._v(" "),a("ol",[a("li",[t._v("派生类中的成员函数：可以直接访问基类中的"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("protected")]),t._v("成员，但不能直接访问基类的"),a("code",[t._v("private")]),t._v("成员；")]),t._v(" "),a("li",[t._v("通过派生类的对象：不能直接访问从基类继承的任何成员。")])]),t._v(" "),a("p",[a("strong",[t._v("私有继承的作用")])]),t._v(" "),a("p",[t._v("父类的 "),a("code",[t._v("public")]),t._v(" 和 "),a("code",[t._v("protected")]),t._v(" 成员在子类中变成了子类 "),a("code",[t._v("private")]),t._v(" 的成员，\n这就意味着从父类继承过来的这些成员("),a("code",[t._v("public/protected")]),t._v("), 子类的成员函数可以调用之;但是子类的对象就不能够调用之；\n进一步的理解就是，在 子类中可以调用父类的("),a("code",[t._v("public/private")]),t._v(")接口, 但是这些接口不会被暴露出去。\n私有继承可以实现 "),a("code",[t._v("has a")]),t._v(" 的关系，也就是包含。")]),t._v(" "),a("h3",{attrs:{id:"保护继承（protected）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保护继承（protected）","aria-hidden":"true"}},[t._v("#")]),t._v(" 保护继承（protected）")]),t._v(" "),a("p",[a("strong",[t._v("继承的访问控制")])]),t._v(" "),a("ol",[a("li",[t._v("基类的"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("protected")]),t._v("成员：都以"),a("code",[t._v("protected")]),t._v("身份出现在派生类中")]),t._v(" "),a("li",[t._v("基类的"),a("code",[t._v("private")]),t._v("成员：不可直接访问。")])]),t._v(" "),a("p",[a("strong",[t._v("访问权限")])]),t._v(" "),a("ol",[a("li",[t._v("派生类中的成员函数：可以直接访问基类中的"),a("code",[t._v("public")]),t._v("和"),a("code",[t._v("protected")]),t._v("成员，但不能直接访问基类的"),a("code",[t._v("private")]),t._v("成员；")]),t._v(" "),a("li",[t._v("通过派生类的对象：不能直接访问从基类继承的任何成员。")])]),t._v(" "),a("p",[a("strong",[t._v("protected成员的特点与作用")])]),t._v(" "),a("ol",[a("li",[t._v("对建立所在类对象的模块来说，它与"),a("code",[t._v("private")]),t._v("成员的性质相同。")]),t._v(" "),a("li",[t._v("对于其派生类来说，它与"),a("code",[t._v("public")]),t._v("成员的性质相同。")]),t._v(" "),a("li",[t._v("既实现了数据隐藏，有方便继承，实现代码重用。")])]),t._v(" "),a("h3",{attrs:{id:"虚继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚继承")]),t._v(" "),a("p",[t._v("虚继承是解决"),a("code",[t._v("C++")]),t._v("多重继承问题的一种手段，从不同途径继承来的同一基类，会在子类中存在多份拷贝。这将存在两个问题：")]),t._v(" "),a("ul",[a("li",[t._v("浪费存储空间；")]),t._v(" "),a("li",[t._v("存在"),a("strong",[t._v("二义性")]),t._v("问题，通常可以将派生类对象的地址赋值给基类对象，实现的具体方式是，将基类指针指向继承类（继承类有基类的拷贝）中的基类对象的地址，但是多重继承可能存在一个基类的多份拷贝，这就出现了二义性。")])]),t._v(" "),a("p",[t._v("虚继承底层实现原理与编译器相关，一般通过"),a("strong",[t._v("虚基类指针和虚基类表")]),t._v("实现，每个虚继承的子类都有一个虚基类指针（占用一个指针的存储空间，4字节）和虚基类表（不占用类对象的存储空间）（需要强调的是，虚基类依旧会在子类里面存在拷贝，只是仅仅最多存在一份而已，并不是不在子类里面了）；当虚继承的子类被当做父类继承时，虚基类指针也会被继承。")]),t._v(" "),a("p",[a("code",[t._v("vbptr")]),t._v("指的是虚基类表指针（"),a("code",[t._v("virtual base table pointer")]),t._v("），该指针指向了一个虚基类表（"),a("code",[t._v("virtual table")]),t._v("），虚表中记录了虚基类与本类的偏移地址；通过偏移地址，这样就找到了虚基类成员，而虚继承也不用像普通多继承那样维持着公共基类（虚基类）的两份同样的拷贝，节省了存储空间。")]),t._v(" "),a("p",[t._v("对比虚函数的实现原理：他们有相似之处，都利用了虚指针（均占用类的存储空间）和虚表（均不占用类的存储空间）。")]),t._v(" "),a("ul",[a("li",[t._v("虚基类依旧存在继承类中，只占用存储空间；虚函数不占用存储空间。")]),t._v(" "),a("li",[t._v("虚基类表存储的是虚基类相对直接继承类的偏移；而虚函数表存储的是虚函数地址。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E8%99%9A%E7%BB%A7%E6%89%BF.jpg",alt:""}})]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dataA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" A\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dataB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" A\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dataC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" C\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dataD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("菱形继承体系中的子类在内存布局上和普通多继承体系中的子类有很大的不一样。对于类"),a("code",[t._v("B")]),t._v("和"),a("code",[t._v("C")]),t._v("，"),a("code",[t._v("sizeof")]),t._v("的值变成了"),a("code",[t._v("12")]),t._v("，除了包含类"),a("code",[t._v("A")]),t._v("的成员变量"),a("code",[t._v("dataA")]),t._v("外还多了一个指针"),a("code",[t._v("vbptr")]),t._v("，类"),a("code",[t._v("D")]),t._v("除了继承"),a("code",[t._v("B")]),t._v("、"),a("code",[t._v("C")]),t._v("各自的成员变量"),a("code",[t._v("dataB")]),t._v("、"),a("code",[t._v("dataA")]),t._v("和自己的成员变量外，还有两个分别属于"),a("code",[t._v("B")]),t._v("、"),a("code",[t._v("C")]),t._v("的"),a("code",[t._v("vbptr")]),t._v("。")]),t._v(" "),a("p",[t._v("那么类"),a("code",[t._v("D")]),t._v("对象的内存布局就变成如下的样子：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("vbptr")]),t._v("：继承自父类"),a("code",[t._v("B")]),t._v("中的指针")]),t._v(" "),a("li",[a("code",[t._v("int dataB")]),t._v("：继承自父类"),a("code",[t._v("B")]),t._v("的成员变量")]),t._v(" "),a("li",[a("code",[t._v("vbptr")]),t._v("：继承自父类"),a("code",[t._v("C")]),t._v("的指针")]),t._v(" "),a("li",[a("code",[t._v("int dataC")]),t._v("：继承自父类"),a("code",[t._v("C")]),t._v("的成员变量")]),t._v(" "),a("li",[a("code",[t._v("int dataD")]),t._v("："),a("code",[t._v("D")]),t._v("自己的成员变量")]),t._v(" "),a("li",[a("code",[t._v("int A")]),t._v("：继承自父类"),a("code",[t._v("A")]),t._v("的成员变量")])]),t._v(" "),a("p",[t._v("虚继承之所以能够实现在多重派生子类中只保存一份共有基类的拷贝，关键在于"),a("code",[t._v("vbptr")]),t._v("指针。那"),a("code",[t._v("vbptr")]),t._v("到底指的是什么？又是如何实现虚继承的呢？其实上面的类"),a("code",[t._v("D")]),t._v("内存布局图中已经给出答案：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("D"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("$vbtable@B@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nD"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("$vbtable@C@"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("实际上，"),a("code",[t._v("vbptr")]),t._v("指的是虚基类表指针（"),a("code",[t._v("virtual base table pointer")]),t._v("），该指针指向了一个虚表（"),a("code",[t._v("virtual table")]),t._v("），虚表中记录了"),a("code",[t._v("vbptr")]),t._v("与本类的偏移地址；第二项是"),a("code",[t._v("vbptr")]),t._v("到共有基类元素之间的偏移量。在这个例子中，类"),a("code",[t._v("B")]),t._v("中的"),a("code",[t._v("vbptr")]),t._v("指向了虚表"),a("code",[t._v("D::$vbtable@B@")]),t._v("，虚表表明公共基类"),a("code",[t._v("A")]),t._v("的成员变量"),a("code",[t._v("dataA")]),t._v("距离类"),a("code",[t._v("B")]),t._v("开始处的位移为"),a("code",[t._v("20")]),t._v("，这样就找到了成员变量"),a("code",[t._v("dataA")]),t._v("，而虚继承也不用像普通多继承那样维持着公共基类的两份同样的拷贝，节省了存储空间。")]),t._v(" "),a("h4",{attrs:{id:"b-c虚继承a，d-public继承-b-c-，有a-a-new-d，a-fun-fun是虚函数，并且b-c都重写了，怎么保证a调用的是b重写的虚函数。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-c虚继承a，d-public继承-b-c-，有a-a-new-d，a-fun-fun是虚函数，并且b-c都重写了，怎么保证a调用的是b重写的虚函数。","aria-hidden":"true"}},[t._v("#")]),t._v(" B C虚继承A，D public继承 B C ，有A *a = new D，a->fun(),fun是虚函数，并且B C都重写了，怎么保证a调用的是B重写的虚函数。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A::fun()."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" A\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B::fun()."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" A\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C::fun()."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" C\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D::fun()."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),a("h3",{attrs:{id:"继承时的名字遮蔽问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承时的名字遮蔽问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 继承时的名字遮蔽问题")]),t._v(" "),a("p",[t._v("如果派生类中的成员（包括成员变量和成员函数）和基类中的成员重名，那么就会遮蔽从基类继承过来的成员。所谓遮蔽，就是在派生类中使用该成员（包括在定义派生类时使用，也包括通过派生类对象访问该成员）时，实际上使用的是派生类新增的成员，而不是从基类继承来的。")]),t._v(" "),a("p",[a("strong",[t._v("基类成员函数和派生类成员函数不构成重载")])]),t._v(" "),a("p",[t._v("基类成员和派生类成员的名字一样时会造成遮蔽，这句话对于成员变量很好理解，对于成员函数要引起注意，不管函数的参数如何，只要名字一样就会造成遮蔽。换句话说，基类成员函数和派生类成员函数不会构成重载，如果派生类有同名函数，那么就会遮蔽基类中的所有同名函数，不管它们的参数是否一样。")]),t._v(" "),a("h3",{attrs:{id:"c-中如何防止类被继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中如何防止类被继承","aria-hidden":"true"}},[t._v("#")]),t._v(" C++中如何防止类被继承")]),t._v(" "),a("ol",[a("li",[t._v("最简单的方法就是将该类的构造函数声明为私有方法，但是这又带来另一个弊端：那就是该类本身不能生成对象了，当然这样能够满足该类不能被继承的要求，却得不偿失。")]),t._v(" "),a("li",[t._v("将"),a("code",[t._v("A")]),t._v("类虚继承"),a("code",[t._v("E")]),t._v("类，但是"),a("code",[t._v("E")]),t._v("类的构造函数是带"),a("code",[t._v("private")]),t._v("属性的，"),a("code",[t._v("A")]),t._v("类还是"),a("code",[t._v("E")]),t._v("类的友元。")])]),t._v(" "),a("p",[a("strong",[t._v("分析：")])]),t._v(" "),a("ul",[a("li",[t._v("如果我们让"),a("code",[t._v("A")]),t._v("类虚继承"),a("code",[t._v("E")]),t._v("类，根据虚继承的特性，虚基类的构造函数由最终的子类负责构造，此时"),a("code",[t._v("E")]),t._v("类的构造函数虽然是私有的，但是"),a("code",[t._v("A")]),t._v("类是"),a("code",[t._v("E")]),t._v("类的友元，所以可以调用"),a("code",[t._v("E")]),t._v("类的构造函数完成初始化。")]),t._v(" "),a("li",[a("code",[t._v("B")]),t._v("类如果要想继承"),a("code",[t._v("A")]),t._v("类，它必须能够调用"),a("code",[t._v("E")]),t._v("虚基类的构造函数来完成初始化，这是不可能的，因为它不是"),a("code",[t._v("E")]),t._v("类的友元！因此，我们的"),a("code",[t._v("A")]),t._v("类也就终于成为了一个无法继承的类，并且我们还可以在"),a("code",[t._v("A")]),t._v("类外实例化对象，可以正常使用。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" E\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("final关键字\n"),a("code",[t._v("final")]),t._v("关键字用于虚函数时可以防止虚函数被子类重写，用于类时可以防止类被继承。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类A可以被实例化，无法被继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" final "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"多态和虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态和虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 多态和虚函数")]),t._v(" "),a("h3",{attrs:{id:"虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚函数")]),t._v(" "),a("p",[t._v("只需要在函数声明前面增加 "),a("code",[t._v("virtual")]),t._v(" 关键字。虚函数是多态性的基础，其调用的方式是动态联编（程序运行时才决定调用基类的还是子类）。\n虚函数的"),a("strong",[t._v("作用")]),t._v("是允许在派生类中重新定义与基类同名的函数，并且可以通过基类指针或引用来访问基类和派生类中的同名函数，达到多态的目的。")]),t._v(" "),a("h4",{attrs:{id:"为什么有的类的析构函数需要定义成虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么有的类的析构函数需要定义成虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么有的类的析构函数需要定义成虚函数")]),t._v(" "),a("p",[a("code",[t._v("C++")]),t._v("中基类采用"),a("code",[t._v("virtual")]),t._v("虚析构函数是为了防止内存泄漏。具体地说，如果派生类中申请了内存空间，并在其析构函数中对这些内存空间进行释放。假设基类中采用的是非虚析构函数，当删除基类指针指向的派生类对象时就不会触发动态绑定，因而只会调用基类的析构函数，而不会调用派生类的析构函数。那么在这种情况下，派生类中申请的空间就得不到释放从而产生内存泄漏。所以，为了防止这种情况的发生，"),a("code",[t._v("C++")]),t._v("中基类的析构函数应采用"),a("code",[t._v("virtual")]),t._v("虚析构函数。")]),t._v(" "),a("h4",{attrs:{id:"c-中哪些函数不可以是虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中哪些函数不可以是虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" C++中哪些函数不可以是虚函数?")]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("普通函数（非成员函数）")]),t._v("：我在前面多态这篇博客里讲到，定义虚函数的主要目的是为了重写达到多态，所以普通函数声明为虚函数没有意义，因此编译器在编译时就绑定了它。")]),t._v(" "),a("p",[t._v("2、"),a("strong",[t._v("静态成员函数")]),t._v("：静态成员函数对于每个类都只有一份代码，所有对象都可以共享这份代码，他不归某一个对象所有，所以它也没有动态绑定的必要。")]),t._v(" "),a("p",[t._v("3、"),a("strong",[t._v("内联成员函数")]),t._v("：内联函数本就是为了减少函数调用的代价，所以在代码中直接展开。但虚函数一定要创建虚函数表，这两者不可能统一。另外，内联函数在编译时被展开，而虚函数在运行时才动态绑定。")]),t._v(" "),a("p",[t._v("4、"),a("strong",[t._v("构造函数")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("因为创建一个对象时需要确定对象的类型，而虚函数是在运行时确定其类型的。而在构造一个对象时，由于对象还未创建成功，编译器无法知道对象的实际类型，是类本身还是类的派生类等等")]),t._v(" "),a("li",[t._v("虚函数的调用需要虚函数表指针，而该指针存放在对象的内存空间中；若构造函数声明为虚函数，那么由于对象还未创建，还没有内存空间，更没有虚函数表地址用来调用虚函数即构造函数了")])]),t._v(" "),a("p",[t._v("5、"),a("strong",[t._v("友元函数")]),t._v("：当我们把一个函数声明为一个类的友元函数时，它只是一个可以访问类内成员的普通函数，并不是这个类的成员函数，自然也不能在自己的类内将它声明为虚函数。")]),t._v(" "),a("h3",{attrs:{id:"纯虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 纯虚函数")]),t._v(" "),a("p",[t._v("纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加"),a("code",[t._v("=0")]),t._v(":")]),t._v(" "),a("p",[a("strong",[t._v("引入原因")])]),t._v(" "),a("ol",[a("li",[t._v("为了方便使用多态特性，我们常常需要在基类中定义虚拟函数。")]),t._v(" "),a("li",[t._v("在很多情况下，基类本身生成对象是不合情理的。例如，动物作为一个基类可以派生出老虎、孔雀等子类，但动物本身生成对象明显不合常理。")])]),t._v(" "),a("p",[t._v("抽象类的作用是作为一个类族的共同基类，或者说，为一个类族提供一个公共接口。")]),t._v(" "),a("h3",{attrs:{id:"虚函数表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚函数表","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚函数表")]),t._v(" "),a("p",[t._v("每一个包含了虚函数的类都有一个虚表。")]),t._v(" "),a("ol",[a("li",[t._v("对于一个"),a("code",[t._v("class")]),t._v("，产生一堆指向"),a("code",[t._v("virtual functions")]),t._v("的指针，这些指针被统一放在一个表格中。这个表格被称为虚函数表，英文又称做"),a("code",[t._v("virtual table（vtbl）")]),t._v("。")]),t._v(" "),a("li",[t._v("每一个对象中都添加一个指针，指向相关的"),a("code",[t._v("virtual table")]),t._v("。通常这个指针被称作虚函数表指针（"),a("code",[t._v("vptr")]),t._v("）。出于效率的考虑，该指针通常放在对象实例最前面的位置（第一个"),a("code",[t._v("slot")]),t._v("处）。每一个"),a("code",[t._v("class")]),t._v("所关联的"),a("code",[t._v("type_info")]),t._v("信息也由"),a("code",[t._v("virtual table")]),t._v("指出（通常放在表格的最前面）。")])]),t._v(" "),a("p",[t._v("类"),a("code",[t._v("A")]),t._v("包含虚函数"),a("code",[t._v("vfunc1")]),t._v("，"),a("code",[t._v("vfunc2")]),t._v("，由于类"),a("code",[t._v("A")]),t._v("包含虚函数，故类A`拥有一个虚表。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_data1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m_data2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E8%99%9A%E8%A1%A8.png",alt:""}})]),t._v(" "),a("p",[t._v("虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。")]),t._v(" "),a("p",[t._v("虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的"),a("strong",[t._v("编译阶段")]),t._v("，虚表就可以构造出来了。")]),t._v(" "),a("h4",{attrs:{id:"虚表指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚表指针","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚表指针")]),t._v(" "),a("p",[t._v("虚表是属于类的，而不是属于某个具体的对象，一个类只需要一个虚表即可。同一个类的所有对象都使用同一个虚表。")]),t._v(" "),a("p",[t._v("为了指定对象的虚表，对象内部包含一个虚表的指针，来指向自己所使用的虚表。为了让每个包含虚表的类的对象都拥有一个虚表指针，编译器在类中添加了一个指针，"),a("code",[t._v("*__vptr")]),t._v("，用来指向虚表。这样，当类的对象在创建时便拥有了这个指针，且这个指针的值会自动被设置为指向类的虚表。\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E8%99%9A%E8%A1%A8%E6%8C%87%E9%92%88.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"动态绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态绑定","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态绑定")]),t._v(" "),a("p",[t._v("如何利用虚表和虚表指针来实现动态绑定：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_data1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m_data2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" A "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_data3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" B "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_data1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m_data4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("类"),a("code",[t._v("A")]),t._v("是基类，类"),a("code",[t._v("B")]),t._v("继承类"),a("code",[t._v("A")]),t._v("，类"),a("code",[t._v("C")]),t._v("又继承类"),a("code",[t._v("B")]),t._v("。类"),a("code",[t._v("A")]),t._v("，类"),a("code",[t._v("B")]),t._v("，类"),a("code",[t._v("C")]),t._v("，其对象模型如下图所示：\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A.png",alt:""}})]),t._v(" "),a("p",[t._v("由于这三个类都有虚函数，故编译器为每个类都创建了一个虚表，即类"),a("code",[t._v("A")]),t._v("的虚表（"),a("code",[t._v("A vtbl")]),t._v("），类"),a("code",[t._v("B")]),t._v("的虚表（"),a("code",[t._v("B vtbl")]),t._v("），类"),a("code",[t._v("C")]),t._v("的虚表（"),a("code",[t._v("C vtbl")]),t._v("）。类"),a("code",[t._v("A")]),t._v("，类"),a("code",[t._v("B")]),t._v("，类"),a("code",[t._v("C")]),t._v("的对象都拥有一个虚表指针，"),a("code",[t._v("*__vptr")]),t._v("，用来指向自己所属类的虚表。")]),t._v(" "),a("ul",[a("li",[t._v("类"),a("code",[t._v("A")]),t._v("包括两个虚函数，故"),a("code",[t._v("A vtbl")]),t._v("包含两个指针，分别指向"),a("code",[t._v("A::vfunc1()")]),t._v("和"),a("code",[t._v("A::vfunc2()")]),t._v("。")]),t._v(" "),a("li",[t._v("类"),a("code",[t._v("B")]),t._v("继承于类"),a("code",[t._v("A")]),t._v("，故类"),a("code",[t._v("B")]),t._v("可以调用类"),a("code",[t._v("A")]),t._v("的函数，但由于类"),a("code",[t._v("B")]),t._v("重写了"),a("code",[t._v("B::vfunc1()")]),t._v("函数，故"),a("code",[t._v("B vtbl")]),t._v("的两个指针分别指向"),a("code",[t._v("B::vfunc1()")]),t._v("和"),a("code",[t._v("A::vfunc2()")]),t._v("。")]),t._v(" "),a("li",[t._v("类"),a("code",[t._v("C")]),t._v("继承于类"),a("code",[t._v("B")]),t._v("，故类"),a("code",[t._v("C")]),t._v("可以调用类"),a("code",[t._v("B")]),t._v("的函数，但由于类"),a("code",[t._v("C")]),t._v("重写了"),a("code",[t._v("C::vfunc2()")]),t._v("函数，故"),a("code",[t._v("C vtbl")]),t._v("的两个指针分别指向"),a("code",[t._v("B::vfunc1()")]),t._v("（指向继承的最近的一个类的函数）和"),a("code",[t._v("C::vfunc2()")]),t._v("。")])]),t._v(" "),a("p",[t._v("假设我们定义一个类"),a("code",[t._v("B")]),t._v("的对象。由于"),a("code",[t._v("bObject")]),t._v("是类"),a("code",[t._v("B")]),t._v("的一个对象，故"),a("code",[t._v("bObject")]),t._v("包含一个虚表指针，指向类"),a("code",[t._v("B")]),t._v("的虚表。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    B bObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们声明一个类"),a("code",[t._v("A")]),t._v("的指针"),a("code",[t._v("p")]),t._v("来指向对象"),a("code",[t._v("bObject")]),t._v("。虽然"),a("code",[t._v("p")]),t._v("是基类的指针只能指向基类的部分，但是虚表指针亦属于基类部分，所以"),a("code",[t._v("p")]),t._v("可以访问到对象"),a("code",[t._v("bObject")]),t._v("的虚表指针。"),a("code",[t._v("bObject")]),t._v("的虚表指针指向类"),a("code",[t._v("B")]),t._v("的虚表，所以"),a("code",[t._v("p")]),t._v("可以访问到"),a("code",[t._v("B vtbl")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    B bObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" bObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当我们使用"),a("code",[t._v("p")]),t._v("来调用"),a("code",[t._v("vfunc1()")]),t._v("函数时，会发生什么现象？")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    B bObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" bObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("程序在执行"),a("code",[t._v("p->vfunc1()")]),t._v("时，会发现"),a("code",[t._v("p")]),t._v("是个指针，且调用的函数是虚函数，接下来便会进行以下的步骤。")]),t._v(" "),a("ul",[a("li",[t._v("首先，根据虚表指针"),a("code",[t._v("p->__vptr")]),t._v("来访问对象"),a("code",[t._v("bObject")]),t._v("对应的虚表。虽然指针"),a("code",[t._v("p")]),t._v("是基类"),a("code",[t._v("A*")]),t._v("类型，但是"),a("code",[t._v("*__vptr")]),t._v("也是基类的一部分，所以可以通过"),a("code",[t._v("p->__vptr")]),t._v("可以访问到对象对应的虚表。")]),t._v(" "),a("li",[t._v("然后，在虚表中查找所调用的函数对应的条目。由于虚表在编译阶段就可以构造出来了，所以可以根据所调用的函数定位到虚表中的对应条目。对于 "),a("code",[t._v("p->vfunc1()")]),t._v("的调用，"),a("code",[t._v("B vtbl")]),t._v("的第一项即是"),a("code",[t._v("vfunc1")]),t._v("对应的条目。")]),t._v(" "),a("li",[t._v("最后，根据虚表中找到的函数指针，调用函数。从图中可以看到，"),a("code",[t._v("B vtbl")]),t._v("的第一项指向"),a("code",[t._v("B::vfunc1()")]),t._v("，所以 "),a("code",[t._v("p->vfunc1()")]),t._v("实质会调用"),a("code",[t._v("B::vfunc1()")]),t._v("函数。")])]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("p")]),t._v("指向类"),a("code",[t._v("A")]),t._v("的对象，情况又是怎么样？")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    A aObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("aObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfunc1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当"),a("code",[t._v("aObject")]),t._v("在创建时，它的虚表指针"),a("code",[t._v("__vptr")]),t._v("已设置为指向"),a("code",[t._v("A vtbl")]),t._v("，这样"),a("code",[t._v("p->__vptr")]),t._v("就指向"),a("code",[t._v("A vtbl")]),t._v("。"),a("code",[t._v("vfunc1")]),t._v("在"),a("code",[t._v("A vtbl")]),t._v("对应在条目指向了"),a("code",[t._v("A::vfunc1()")]),t._v("函数，所以 "),a("code",[t._v("p->vfunc1()")]),t._v("实质会调用"),a("code",[t._v("A::vfunc1()")]),t._v("函数。")]),t._v(" "),a("h4",{attrs:{id:"单继承情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单继承情况","aria-hidden":"true"}},[t._v("#")]),t._v(" 单继承情况")]),t._v(" "),a("h5",{attrs:{id:"单继承情况且本身不存在虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单继承情况且本身不存在虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 单继承情况且本身不存在虚函数")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derive1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("现在类的布局情况应该是下面这样:\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E5%8D%95%E7%BB%A7%E6%89%BF01.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"单继承覆盖基类的虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单继承覆盖基类的虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 单继承覆盖基类的虚函数")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derive1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖基类函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("Derive1")]),t._v("类 重写了"),a("code",[t._v("Base1")]),t._v("类的"),a("code",[t._v("base1_fun1()")]),t._v("函数, 也就是常说的虚函数覆盖。无论是通过"),a("code",[t._v("Derive1")]),t._v("的指针还是"),a("code",[t._v("Base1")]),t._v("的指针来调用此方法, 调用的都将是被继承类重写后的那个方法(函数), 这时就产生了多态。\n那么新的布局图:\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E5%8D%95%E7%BB%A7%E6%89%BF02.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"单继承同时新定义了基类没有的虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单继承同时新定义了基类没有的虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 单继承同时新定义了基类没有的虚函数")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derive1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("derive1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("继承类"),a("code",[t._v("Derive1")]),t._v("的虚函数表被加在基类的后面。\n由于"),a("code",[t._v("Base1")]),t._v("只知道自己的两个虚函数索引"),a("code",[t._v("[0][1]")]),t._v(", 所以就算在后面加上了"),a("code",[t._v("[2]")]),t._v(", "),a("code",[t._v("Base1")]),t._v("根本不知情, 不会对她造成任何影响。\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E5%8D%95%E7%BB%A7%E6%89%BF03.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"多继承且存在虚函数覆盖又存在自身定义的虚函数的类对象布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多继承且存在虚函数覆盖又存在自身定义的虚函数的类对象布局","aria-hidden":"true"}},[t._v("#")]),t._v(" 多继承且存在虚函数覆盖又存在自身定义的虚函数的类对象布局")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base2_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base2_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base2_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base2_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derive1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基类虚函数覆盖")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base2_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自身定义的虚函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("derive1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("derive1_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("Derive1")]),t._v("的虚函数表依然是保存到第1个拥有虚函数表的那个基类的后面的。\n看看现在的类对象布局图:\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E5%A4%9A%E7%BB%A7%E6%89%BF01.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"如果第1个直接基类没有虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果第1个直接基类没有虚函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 如果第1个直接基类没有虚函数")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base2_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base2_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base2_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base2_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derive1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自身定义的虚函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("derive1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("derive1_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("谁有虚函数表, 谁就放在前面!\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E5%A4%9A%E7%BB%A7%E6%89%BF02.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"what-if-两个基类都没有虚函数表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-if-两个基类都没有虚函数表","aria-hidden":"true"}},[t._v("#")]),t._v(" What if 两个基类都没有虚函数表")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base2_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" base2_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Derive1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Base2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" derive1_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自身定义的虚函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("derive1_fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("derive1_fun2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Hewie8023/VueBlogImg/master/C%2B%2B/%E5%A4%9A%E7%BB%A7%E6%89%BF03.png",alt:""}})])])}),[],!1,null,null,null);s.default=e.exports}}]);